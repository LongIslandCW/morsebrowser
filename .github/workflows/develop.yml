# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [develop]
  pull_request:
    branches: [develop]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Setup Node.js environment
        uses: actions/setup-node@v3.1.0
        with:
          # Version Spec of the version to use.  Examples: 12.x, 10.15.1, >=10.15.0
          node-version: 12.x

      - run: npm ci

      - run: npm run build --if-present

      - name: Deploy to GitHub Pages
        if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true)
        # You may pin to the exact commit or the version.
        # uses: JamesIves/github-pages-deploy-action@360c8e75d0ee81732d0a5675c71e51b569df2ee8
        uses: JamesIves/github-pages-deploy-action@v4.3.0
        with:
          # This option allows you to define a private SSH key to be used in conjunction with a repository deployment key to deploy using SSH. The private key should be stored in the `secrets / with` menu **as a secret**. The public should be stored in the repositories deployment keys menu and be given write access.
          # Alternatively you can set this field to `true` to enable SSH endpoints for deployment without configuring the ssh client. This can be useful if you've already setup the SSH client using another package or action in a previous step.

          # ssh-key: ${{ secrets.MORSEDEVDEPLOY }}
          # This option defaults to the repository scoped GitHub Token.  However if you need more permissions for things such as deploying to another repository, you can add a Personal Access Token (PAT) here.  This should be stored in the `secrets / with` menu **as a secret**.
          # We recommend using a service account with the least permissions neccersary and when generating a new PAT that you select the least permission scopes required.
          # [Learn more about creating and using encrypted secrets here.](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)

          # token: # optional, default is ${{ github.token }}
          # This is the branch you wish to deploy to, for example gh-pages or docs.
          branch: gh-pages
          # The folder in your repository that you want to deploy. If your build script compiles into a directory named build you would put it here. Folder paths cannot have a leading / or ./. If you wish to deploy the root directory you can place a . here.
          folder: dist
          # If you would like to push the contents of the deployment folder into a specific directory on the deployment branch you can specify it here.
          target-folder: dev # optional
          # If you need to customize the commit message for an integration you can do so.
          # commit-message: # optional
          # If your project generates hashed files on build you can use this option to automatically delete them from the target folder on the deployment branch with each deploy. This option is on by default and can be toggled off by setting it to false.
          # clean: # optional, default is true
          # If you need to use clean but you would like to preserve certain files or folders you can use this option. This should contain each pattern as a single line in a multiline string.
          # clean-exclude: # optional
          # Do not actually push back, but use `--dry-run` on `git push` invocations insead.
          # dry-run: # optional
          # Whether to force-push and overwrite any existing deployment. Setting this to false will attempt to rebase simultaneous deployments. This option is on by default and can be toggled off by setting it to false.
          # force: # optional, default is true
          # Allows you to customize the name that is attached to the GitHub config which is used when pushing the deployment commits. If this is not included it will use the name in the GitHub context, followed by the name of the action.
          # git-config-name: # optional
          # Allows you to customize the email that is attached to the GitHub config which is used when pushing the deployment commits. If this is not included it will use the email in the GitHub context, followed by a generic noreply GitHub email.
          # git-config-email: # optional
          # Allows you to specify a different repository path so long as you have permissions to push to it. This should be formatted like so: JamesIves/github-pages-deploy-action
          # repository-name: RandyLoeb/morse_browser_develop
          # This should point to where your project lives on the virtual machine. The GitHub Actions environment will set this for you. It is only neccersary to set this variable if you're using the node module.
          # workspace: # optional
          # This option can be used if you'd prefer to have a single commit on the deployment branch instead of maintaining the full history.
          # single-commit: # optional
          # Silences the action output preventing it from displaying git messages.
          # silent: # optional
